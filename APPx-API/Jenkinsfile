pipeline {
    agent any

    environment {
        WORK_DIR = "/var/jenkins_home/${BUILD_ID}"
        MINIKUBE_WORK_DIR = "/var/"
        DOCKER_IMAGE_NAME = "ramirobalbo/devops"
        DOCKER_IMAGE_TAG = "appx-api"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out SCM-Jobs Project'
                dir("${WORK_DIR}") {
                    git branch: 'main',
                        credentialsId: '71b65a24-f004-41ae-a5b0-302b06df2c3e',
                        url: 'https://github.com/ramirobalbo/DevOps-CI-CD.git'
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application'
                dir("${WORK_DIR}/APPx-API") {
                    sh 'mvn clean package' 
                }
            }
        }

        stage("SonarQube Analysis") {
            steps {
                echo 'SonarQube Analysis'
                script {
                    def scannerHome = tool 'SonarScanner 6.2';
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=RamiroBalbo_DevOps-CI-CD_6cf1b0af-d03b-458e-9379-b7d171d4e2e9
                            -Dsonar.sources=${WORK_DIR}/APPx-API \
                            -Dsonar.projectBaseDir=${WORK_DIR}/APPx-API
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image'
                dir("${WORK_DIR}/APPx-API") {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub'
                script {
                    sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Restart Deployment') {
            agent { label 'minikube-java' }
            steps {
                echo 'Restarting Deployment'
                sh '''
                    alias kubectl="minikube kubectl --"
                    kubectl rollout restart deployment appx-api-deployment
                '''
            }
        }
    }
}
